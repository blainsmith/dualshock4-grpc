// Code generated by protoc-gen-go. DO NOT EDIT.
// source: events.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	events.proto

It has these top-level messages:
	Empty
	ControllerState
	ControllerColor
	SignalMessage
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ControllerState struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Player    string `protobuf:"bytes,2,opt,name=player" json:"player,omitempty"`
	State     []byte `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *ControllerState) Reset()                    { *m = ControllerState{} }
func (m *ControllerState) String() string            { return proto.CompactTextString(m) }
func (*ControllerState) ProtoMessage()               {}
func (*ControllerState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ControllerState) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ControllerState) GetPlayer() string {
	if m != nil {
		return m.Player
	}
	return ""
}

func (m *ControllerState) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

type ControllerColor struct {
	Red   uint32 `protobuf:"varint,1,opt,name=Red" json:"Red,omitempty"`
	Green uint32 `protobuf:"varint,2,opt,name=Green" json:"Green,omitempty"`
	Blue  uint32 `protobuf:"varint,3,opt,name=Blue" json:"Blue,omitempty"`
}

func (m *ControllerColor) Reset()                    { *m = ControllerColor{} }
func (m *ControllerColor) String() string            { return proto.CompactTextString(m) }
func (*ControllerColor) ProtoMessage()               {}
func (*ControllerColor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ControllerColor) GetRed() uint32 {
	if m != nil {
		return m.Red
	}
	return 0
}

func (m *ControllerColor) GetGreen() uint32 {
	if m != nil {
		return m.Green
	}
	return 0
}

func (m *ControllerColor) GetBlue() uint32 {
	if m != nil {
		return m.Blue
	}
	return 0
}

type SignalMessage struct {
	Signal uint32 `protobuf:"varint,1,opt,name=signal" json:"signal,omitempty"`
}

func (m *SignalMessage) Reset()                    { *m = SignalMessage{} }
func (m *SignalMessage) String() string            { return proto.CompactTextString(m) }
func (*SignalMessage) ProtoMessage()               {}
func (*SignalMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SignalMessage) GetSignal() uint32 {
	if m != nil {
		return m.Signal
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*ControllerState)(nil), "pb.ControllerState")
	proto.RegisterType((*ControllerColor)(nil), "pb.ControllerColor")
	proto.RegisterType((*SignalMessage)(nil), "pb.SignalMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Events service

type EventsClient interface {
	Track(ctx context.Context, opts ...grpc.CallOption) (Events_TrackClient, error)
	Color(ctx context.Context, opts ...grpc.CallOption) (Events_ColorClient, error)
	Signal(ctx context.Context, opts ...grpc.CallOption) (Events_SignalClient, error)
}

type eventsClient struct {
	cc *grpc.ClientConn
}

func NewEventsClient(cc *grpc.ClientConn) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) Track(ctx context.Context, opts ...grpc.CallOption) (Events_TrackClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Events_serviceDesc.Streams[0], c.cc, "/pb.Events/Track", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsTrackClient{stream}
	return x, nil
}

type Events_TrackClient interface {
	Send(*ControllerState) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type eventsTrackClient struct {
	grpc.ClientStream
}

func (x *eventsTrackClient) Send(m *ControllerState) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventsTrackClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventsClient) Color(ctx context.Context, opts ...grpc.CallOption) (Events_ColorClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Events_serviceDesc.Streams[1], c.cc, "/pb.Events/Color", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsColorClient{stream}
	return x, nil
}

type Events_ColorClient interface {
	Send(*ControllerColor) error
	Recv() (*ControllerColor, error)
	grpc.ClientStream
}

type eventsColorClient struct {
	grpc.ClientStream
}

func (x *eventsColorClient) Send(m *ControllerColor) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventsColorClient) Recv() (*ControllerColor, error) {
	m := new(ControllerColor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventsClient) Signal(ctx context.Context, opts ...grpc.CallOption) (Events_SignalClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Events_serviceDesc.Streams[2], c.cc, "/pb.Events/Signal", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsSignalClient{stream}
	return x, nil
}

type Events_SignalClient interface {
	Send(*SignalMessage) error
	Recv() (*SignalMessage, error)
	grpc.ClientStream
}

type eventsSignalClient struct {
	grpc.ClientStream
}

func (x *eventsSignalClient) Send(m *SignalMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventsSignalClient) Recv() (*SignalMessage, error) {
	m := new(SignalMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Events service

type EventsServer interface {
	Track(Events_TrackServer) error
	Color(Events_ColorServer) error
	Signal(Events_SignalServer) error
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_Track_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventsServer).Track(&eventsTrackServer{stream})
}

type Events_TrackServer interface {
	SendAndClose(*Empty) error
	Recv() (*ControllerState, error)
	grpc.ServerStream
}

type eventsTrackServer struct {
	grpc.ServerStream
}

func (x *eventsTrackServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventsTrackServer) Recv() (*ControllerState, error) {
	m := new(ControllerState)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Events_Color_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventsServer).Color(&eventsColorServer{stream})
}

type Events_ColorServer interface {
	Send(*ControllerColor) error
	Recv() (*ControllerColor, error)
	grpc.ServerStream
}

type eventsColorServer struct {
	grpc.ServerStream
}

func (x *eventsColorServer) Send(m *ControllerColor) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventsColorServer) Recv() (*ControllerColor, error) {
	m := new(ControllerColor)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Events_Signal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventsServer).Signal(&eventsSignalServer{stream})
}

type Events_SignalServer interface {
	Send(*SignalMessage) error
	Recv() (*SignalMessage, error)
	grpc.ServerStream
}

type eventsSignalServer struct {
	grpc.ServerStream
}

func (x *eventsSignalServer) Send(m *SignalMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventsSignalServer) Recv() (*SignalMessage, error) {
	m := new(SignalMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Events",
	HandlerType: (*EventsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Track",
			Handler:       _Events_Track_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Color",
			Handler:       _Events_Color_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Signal",
			Handler:       _Events_Signal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "events.proto",
}

func init() { proto.RegisterFile("events.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0xcd, 0xee, 0xb6, 0xd2, 0x61, 0x8b, 0x3a, 0x8a, 0x94, 0xe2, 0xa1, 0xf4, 0x62, 0x41,
	0x28, 0xa2, 0x82, 0x77, 0x97, 0xc5, 0xd3, 0x5e, 0xb2, 0x5e, 0x3d, 0xa4, 0x3a, 0x2c, 0x8b, 0x69,
	0x13, 0x92, 0x28, 0xec, 0xff, 0xf1, 0x87, 0x4a, 0x92, 0x82, 0xba, 0x7a, 0x9b, 0xf7, 0x31, 0xef,
	0xf1, 0x26, 0x81, 0x39, 0x7d, 0xd0, 0xe0, 0x6c, 0xab, 0x8d, 0x72, 0x0a, 0x27, 0xba, 0xab, 0x0f,
	0x21, 0x59, 0xf6, 0xda, 0xed, 0xea, 0x67, 0x38, 0x5a, 0xa8, 0xc1, 0x19, 0x25, 0x25, 0x99, 0xb5,
	0x13, 0x8e, 0xf0, 0x02, 0x32, 0xb7, 0xed, 0xc9, 0x3a, 0xd1, 0xeb, 0x82, 0x55, 0xac, 0x99, 0xf1,
	0x6f, 0x80, 0xe7, 0x90, 0x6a, 0x29, 0x76, 0x64, 0x8a, 0x49, 0xc5, 0x9a, 0x8c, 0x8f, 0x0a, 0xcf,
	0x20, 0xb1, 0xde, 0x5e, 0x4c, 0x2b, 0xd6, 0xcc, 0x79, 0x14, 0xf5, 0xea, 0x67, 0xfc, 0x42, 0x49,
	0x65, 0xf0, 0x18, 0xa6, 0x9c, 0x5e, 0x43, 0x70, 0xce, 0xfd, 0xe8, 0xad, 0x8f, 0x86, 0x68, 0x08,
	0x89, 0x39, 0x8f, 0x02, 0x11, 0x66, 0x0f, 0xf2, 0x3d, 0xe6, 0xe5, 0x3c, 0xcc, 0xf5, 0x25, 0xe4,
	0xeb, 0xed, 0x66, 0x10, 0x72, 0x45, 0xd6, 0x8a, 0x0d, 0xf9, 0x36, 0x36, 0x80, 0x31, 0x6f, 0x54,
	0x37, 0x9f, 0x0c, 0xd2, 0x65, 0x38, 0x1a, 0xaf, 0x20, 0x79, 0x32, 0xe2, 0xe5, 0x0d, 0x4f, 0x5b,
	0xdd, 0xb5, 0x7b, 0xc7, 0x96, 0x99, 0x87, 0xf1, 0x29, 0x0e, 0x1a, 0x86, 0xf7, 0x90, 0xc4, 0x96,
	0x7b, 0xcb, 0x01, 0x96, 0xff, 0x41, 0x6f, 0xbb, 0x66, 0x78, 0x07, 0x69, 0x6c, 0x86, 0x27, 0x7e,
	0xe9, 0x57, 0xcb, 0xf2, 0x2f, 0x8a, 0xae, 0x2e, 0x0d, 0x3f, 0x72, 0xfb, 0x15, 0x00, 0x00, 0xff,
	0xff, 0x45, 0x19, 0x95, 0x9c, 0xa1, 0x01, 0x00, 0x00,
}
